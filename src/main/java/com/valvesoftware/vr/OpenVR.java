package com.valvesoftware.vr;

import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;

/**
 * JNA Wrapper for library <b>com.valvesoftware.vr</b><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public interface OpenVR extends Library {
  
  public static final String JNA_LIBRARY_NAME = "C:/dev/openvr-0.9.0/bin/win64/LibOVRRT64_0_5.dll";
  public static final OpenVR INSTANCE = (OpenVR) Native.loadLibrary(OpenVR.JNA_LIBRARY_NAME, OpenVR.class);

  public static interface Hmd_Eye {
    public static final int Eye_Left = 0;
    public static final int Eye_Right = 1;
  };

  public static interface GraphicsAPIConvention {
    public static final int API_DirectX = 0;
    public static final int API_OpenGL = 1;
  };

  public static interface HmdTrackingResult {
    public static final int TrackingResult_Uninitialized = 1;
    public static final int TrackingResult_Calibrating_InProgress = 100;
    public static final int TrackingResult_Calibrating_OutOfRange = 101;
    public static final int TrackingResult_Running_OK = 200;
    public static final int TrackingResult_Running_OutOfRange = 201;
  };

  public static interface TrackedDeviceClass {
    public static final int TrackedDeviceClass_Invalid = 0;
    public static final int TrackedDeviceClass_HMD = 1;
    public static final int TrackedDeviceClass_Controller = 2;
    public static final int TrackedDeviceClass_TrackingReference = 4;
    public static final int TrackedDeviceClass_Other = 1000;
  };

  public static interface TrackingUniverseOrigin {
    public static final int TrackingUniverseSeated = 0;
    public static final int TrackingUniverseStanding = 1;
    public static final int TrackingUniverseRawAndUncalibrated = 2;
  };

  public static interface TrackedDeviceProperty {
    public static final int Prop_TrackingSystemName_String = 1000;
    public static final int Prop_ModelNumber_String = 1001;
    public static final int Prop_SerialNumber_String = 1002;
    public static final int Prop_RenderModelName_String = 1003;
    public static final int Prop_WillDriftInYaw_Bool = 1004;
    public static final int Prop_ManufacturerName_String = 1005;
    public static final int Prop_TrackingFirmwareVersion_String = 1006;
    public static final int Prop_HardwareRevision_String = 1007;
    public static final int Prop_ReportsTimeSinceVSync_Bool = 2000;
    public static final int Prop_SecondsFromVsyncToPhotons_Float = 2001;
    public static final int Prop_DisplayFrequency_Float = 2002;
    public static final int Prop_UserIpdMeters_Float = 2003;
    public static final int Prop_CurrentUniverseId_Uint64 = 2004;
    public static final int Prop_PreviousUniverseId_Uint64 = 2005;
    public static final int Prop_DisplayFirmwareVersion_String = 2006;
    public static final int Prop_AttachedDeviceId_String = 3000;
    public static final int Prop_SupportedButtons_Uint64 = 3001;
    public static final int Prop_Axis0Type_Int32 = 3002;
    public static final int Prop_Axis1Type_Int32 = 3003;
    public static final int Prop_Axis2Type_Int32 = 3004;
    public static final int Prop_Axis3Type_Int32 = 3005;
    public static final int Prop_Axis4Type_Int32 = 3006;
    public static final int Prop_FieldOfViewLeftDegrees_Float = 4000;
    public static final int Prop_FieldOfViewRightDegrees_Float = 4001;
    public static final int Prop_FieldOfViewTopDegrees_Float = 4002;
    public static final int Prop_FieldOfViewBottomDegrees_Float = 4003;
    public static final int Prop_TrackingRangeMinimumMeters_Float = 4004;
    public static final int Prop_TrackingRangeMaximumMeters_Float = 4005;
  };

  public static interface TrackedPropertyError {
    public static final int TrackedProp_Success = 0;
    public static final int TrackedProp_WrongDataType = 1;
    public static final int TrackedProp_WrongDeviceClass = 2;
    public static final int TrackedProp_BufferTooSmall = 3;
    public static final int TrackedProp_UnknownProperty = 4;
    public static final int TrackedProp_InvalidDevice = 5;
    public static final int TrackedProp_CouldNotContactServer = 6;
    public static final int TrackedProp_ValueNotProvidedByDevice = 7;
    public static final int TrackedProp_StringExceedsMaximumLength = 8;
  };

  public static interface EVREventType {
    public static final int VREvent_None = 0;
    public static final int VREvent_TrackedDeviceActivated = 100;
    public static final int VREvent_TrackedDeviceDeactivated = 101;
    public static final int VREvent_TrackedDeviceUpdated = 102;
    public static final int VREvent_ButtonPress = 200;
    public static final int VREvent_ButtonUnpress = 201;
    public static final int VREvent_ButtonTouch = 202;
    public static final int VREvent_ButtonUntouch = 203;
    public static final int VREvent_MouseMove = 300;
    public static final int VREvent_MouseButtonDown = 301;
    public static final int VREvent_MouseButtonUp = 302;
    public static final int VREvent_InputFocusCaptured = 400;
    public static final int VREvent_InputFocusReleased = 401;
  };

  public static interface EVRButtonId {
    public static final int k_EButton_System = 0;
    public static final int k_EButton_ApplicationMenu = 1;
    public static final int k_EButton_Grip = 2;
    public static final int k_EButton_Axis0 = 32;
    public static final int k_EButton_Axis1 = 33;
    public static final int k_EButton_Axis2 = 34;
    public static final int k_EButton_Axis3 = 35;
    public static final int k_EButton_Axis4 = 36;
    public static final int k_EButton_SteamVR_Touchpad = OpenVR.EVRButtonId.k_EButton_Axis0;
    public static final int k_EButton_SteamVR_Trigger = OpenVR.EVRButtonId.k_EButton_Axis1;
    public static final int k_EButton_Max = 64;
  };

  public static interface EVRMouseButton {
    public static final int VRMouseButton_Left = 0x0001;
    public static final int VRMouseButton_Right = 0x0002;
    public static final int VRMouseButton_Middle = 0x0004;
  };

  public static interface EVRControllerAxisType {
    public static final int k_eControllerAxis_None = 0;
    public static final int k_eControllerAxis_TrackPad = 1;
    public static final int k_eControllerAxis_Joystick = 2;
    public static final int k_eControllerAxis_Trigger = 3;
  };

  public static interface EVRControllerEventOutputType {
    public static final int ControllerEventOutput_OSEvents = 0;
    public static final int ControllerEventOutput_VREvents = 1;
  };

  public static interface HmdError {
    public static final int HmdError_None = 0;
    public static final int HmdError_Unknown = 1;
    public static final int HmdError_Init_InstallationNotFound = 100;
    public static final int HmdError_Init_InstallationCorrupt = 101;
    public static final int HmdError_Init_VRClientDLLNotFound = 102;
    public static final int HmdError_Init_FileNotFound = 103;
    public static final int HmdError_Init_FactoryNotFound = 104;
    public static final int HmdError_Init_InterfaceNotFound = 105;
    public static final int HmdError_Init_InvalidInterface = 106;
    public static final int HmdError_Init_UserConfigDirectoryInvalid = 107;
    public static final int HmdError_Init_HmdNotFound = 108;
    public static final int HmdError_Init_NotInitialized = 109;
    public static final int HmdError_Init_PathRegistryNotFound = 110;
    public static final int HmdError_Init_NoConfigPath = 111;
    public static final int HmdError_Init_NoLogPath = 112;
    public static final int HmdError_Init_PathRegistryNotWritable = 113;
    public static final int HmdError_Driver_Failed = 200;
    public static final int HmdError_Driver_Unknown = 201;
    public static final int HmdError_Driver_HmdUnknown = 202;
    public static final int HmdError_Driver_NotLoaded = 203;
    public static final int HmdError_Driver_RuntimeOutOfDate = 204;
    public static final int HmdError_Driver_HmdInUse = 205;
    public static final int HmdError_IPC_ServerInitFailed = 300;
    public static final int HmdError_IPC_ConnectFailed = 301;
    public static final int HmdError_IPC_SharedStateInitFailed = 302;
    public static final int HmdError_IPC_CompositorInitFailed = 303;
    public static final int HmdError_IPC_MutexInitFailed = 304;
    public static final int HmdError_VendorSpecific_UnableToConnectToOculusRuntime = 1000;
    public static final int HmdError_Steam_SteamInstallationNotFound = 2000;
  };

  public static final int k_unTrackingStringSize = 32;
  public static final int k_unMaxTrackedDeviceCount = 16;
  public static final int k_unTrackedDeviceIndex_Hmd = 0;
  public static final int k_unTrackedDeviceIndexInvalid = -1;
  public static final int k_unMaxPropertyStringSize = 32 * 1024;
  public static final int k_unControllerStateAxisCount = 5;

  long buttonMaskFromId(int id);

  @Deprecated
  void vRIVRSystemGetWindowBounds(IntByReference instancePtr, IntByReference pnX,
      IntByReference pnY, IntByReference pnWidth, IntByReference pnHeight);

  void vRIVRSystemGetWindowBounds(IntBuffer instancePtr, IntBuffer pnX, IntBuffer pnY,
      IntBuffer pnWidth, IntBuffer pnHeight);

  @Deprecated
  void vRIVRSystemGetRecommendedRenderTargetSize(IntByReference instancePtr,
      IntByReference pnWidth, IntByReference pnHeight);

  void vRIVRSystemGetRecommendedRenderTargetSize(IntBuffer instancePtr, IntBuffer pnWidth,
      IntBuffer pnHeight);

  void vRIVRSystemGetEyeOutputViewport(IntBuffer instancePtr, int eEye, IntBuffer pnX,
      IntBuffer pnY, IntBuffer pnWidth, IntBuffer pnHeight);

  com.valvesoftware.vr.HmdMatrix44_t.ByValue vRIVRSystemGetProjectionMatrix(IntBuffer instancePtr,
      int eEye, float fNearZ, float fFarZ, int eProjType);

  void vRIVRSystemGetProjectionRaw(IntBuffer instancePtr, int eEye, FloatBuffer pfLeft,
      FloatBuffer pfRight, FloatBuffer pfTop, FloatBuffer pfBottom);

  @Deprecated
  com.valvesoftware.vr.DistortionCoordinates_t.ByValue vRIVRSystemComputeDistortion(
      IntByReference instancePtr, int eEye, float fU, float fV);

  com.valvesoftware.vr.DistortionCoordinates_t.ByValue vRIVRSystemComputeDistortion(
      IntBuffer instancePtr, int eEye, float fU, float fV);

  @Deprecated
  HmdMatrix34_t.ByValue vRIVRSystemGetEyeToHeadTransform(IntByReference instancePtr, int eEye);

  HmdMatrix34_t.ByValue vRIVRSystemGetEyeToHeadTransform(IntBuffer instancePtr, int eEye);

  @Deprecated
  byte vRIVRSystemGetTimeSinceLastVsync(IntByReference instancePtr,
      FloatByReference pfSecondsSinceLastVsync, LongByReference pulFrameCounter);

  byte vRIVRSystemGetTimeSinceLastVsync(IntBuffer instancePtr,
      FloatBuffer pfSecondsSinceLastVsync, LongBuffer pulFrameCounter);

  @Deprecated
  int vRIVRSystemGetD3D9AdapterIndex(IntByReference instancePtr);

  int vRIVRSystemGetD3D9AdapterIndex(IntBuffer instancePtr);

  @Deprecated
  void vRIVRSystemGetDXGIOutputInfo(IntByReference instancePtr, IntByReference pnAdapterIndex,
      IntByReference pnAdapterOutputIndex);

  void vRIVRSystemGetDXGIOutputInfo(IntBuffer instancePtr, IntBuffer pnAdapterIndex,
      IntBuffer pnAdapterOutputIndex);

  @Deprecated
  byte vRIVRSystemAttachToWindow(IntByReference instancePtr, Pointer hWnd);

  byte vRIVRSystemAttachToWindow(IntBuffer instancePtr, Pointer hWnd);

  @Deprecated
  void vRIVRSystemGetDeviceToAbsoluteTrackingPose(IntByReference instancePtr, int eOrigin,
      float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t pTrackedDevicePoseArray,
      int unTrackedDevicePoseArrayCount);

  void vRIVRSystemGetDeviceToAbsoluteTrackingPose(IntBuffer instancePtr, int eOrigin,
      float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t pTrackedDevicePoseArray,
      int unTrackedDevicePoseArrayCount);

  @Deprecated
  void vRIVRSystemResetSeatedZeroPose(IntByReference instancePtr);

  void vRIVRSystemResetSeatedZeroPose(IntBuffer instancePtr);

  @Deprecated
  HmdMatrix34_t.ByValue vRIVRSystemGetSeatedZeroPoseToStandingAbsoluteTrackingPose(
      IntByReference instancePtr);

  HmdMatrix34_t.ByValue vRIVRSystemGetSeatedZeroPoseToStandingAbsoluteTrackingPose(
      IntBuffer instancePtr);

  @Deprecated
  byte vRIVRSystemLoadRenderModel(IntByReference instancePtr, Pointer pchRenderModelName,
      RenderModel_t pRenderModel);

  byte vRIVRSystemLoadRenderModel(IntBuffer instancePtr, String pchRenderModelName,
      RenderModel_t pRenderModel);

  @Deprecated
  void vRIVRSystemFreeRenderModel(IntByReference instancePtr, RenderModel_t pRenderModel);

  void vRIVRSystemFreeRenderModel(IntBuffer instancePtr, RenderModel_t pRenderModel);

  @Deprecated
  int vRIVRSystemGetTrackedDeviceClass(IntByReference instancePtr, int unDeviceIndex);

  int vRIVRSystemGetTrackedDeviceClass(IntBuffer instancePtr, int unDeviceIndex);

  @Deprecated
  byte vRIVRSystemIsTrackedDeviceConnected(IntByReference instancePtr, int unDeviceIndex);

  byte vRIVRSystemIsTrackedDeviceConnected(IntBuffer instancePtr, int unDeviceIndex);

  @Deprecated
  byte vRIVRSystemGetBoolTrackedDeviceProperty(IntByReference instancePtr, int unDeviceIndex,
      int prop, IntByReference pError);

  byte vRIVRSystemGetBoolTrackedDeviceProperty(IntBuffer instancePtr, int unDeviceIndex, int prop,
      IntBuffer pError);

  @Deprecated
  float vRIVRSystemGetFloatTrackedDeviceProperty(IntByReference instancePtr, int unDeviceIndex,
      int prop, IntByReference pError);

  float vRIVRSystemGetFloatTrackedDeviceProperty(IntBuffer instancePtr, int unDeviceIndex,
      int prop, IntBuffer pError);

  @Deprecated
  int vRIVRSystemGetInt32TrackedDeviceProperty(IntByReference instancePtr, int unDeviceIndex,
      int prop, IntByReference pError);

  int vRIVRSystemGetInt32TrackedDeviceProperty(IntBuffer instancePtr, int unDeviceIndex, int prop,
      IntBuffer pError);

  @Deprecated
  long vRIVRSystemGetUint64TrackedDeviceProperty(IntByReference instancePtr, int unDeviceIndex,
      int prop, IntByReference pError);

  long vRIVRSystemGetUint64TrackedDeviceProperty(IntBuffer instancePtr, int unDeviceIndex,
      int prop, IntBuffer pError);

  @Deprecated
  HmdMatrix34_t.ByValue vRIVRSystemGetMatrix34TrackedDeviceProperty(IntByReference instancePtr,
      int unDeviceIndex, int prop, IntByReference pError);

  HmdMatrix34_t.ByValue vRIVRSystemGetMatrix34TrackedDeviceProperty(IntBuffer instancePtr,
      int unDeviceIndex, int prop, IntBuffer pError);

  @Deprecated
  int vRIVRSystemGetStringTrackedDeviceProperty(IntByReference instancePtr, int unDeviceIndex,
      int prop, Pointer pchValue, int unBufferSize, IntByReference pError);

  int vRIVRSystemGetStringTrackedDeviceProperty(IntBuffer instancePtr, int unDeviceIndex,
      int prop, ByteBuffer pchValue, int unBufferSize, IntBuffer pError);

  @Deprecated
  Pointer vRIVRSystemGetPropErrorNameFromEnum(IntByReference instancePtr, int error);

  Pointer vRIVRSystemGetPropErrorNameFromEnum(IntBuffer instancePtr, int error);

  @Deprecated
  byte vRIVRSystemPollNextEvent(IntByReference instancePtr, VREvent_t pEvent);

  byte vRIVRSystemPollNextEvent(IntBuffer instancePtr, VREvent_t pEvent);

  @Deprecated
  byte vRIVRSystemPollNextEventWithPose(IntByReference instancePtr, int eOrigin, VREvent_t pEvent,
      TrackedDevicePose_t pTrackedDevicePose);

  byte vRIVRSystemPollNextEventWithPose(IntBuffer instancePtr, int eOrigin, VREvent_t pEvent,
      TrackedDevicePose_t pTrackedDevicePose);

  @Deprecated
  Pointer vRIVRSystemGetEventTypeNameFromEnum(IntByReference instancePtr, int eType);

  Pointer vRIVRSystemGetEventTypeNameFromEnum(IntBuffer instancePtr, int eType);

  @Deprecated
  com.valvesoftware.vr.HiddenAreaMesh_t.ByValue vRIVRSystemGetHiddenAreaMesh(
      IntByReference instancePtr, int eEye);

  com.valvesoftware.vr.HiddenAreaMesh_t.ByValue vRIVRSystemGetHiddenAreaMesh(
      IntBuffer instancePtr, int eEye);

  @Deprecated
  byte vRIVRSystemGetControllerState(IntByReference instancePtr, int unControllerDeviceIndex,
      VRControllerState001_t pControllerState);

  byte vRIVRSystemGetControllerState(IntBuffer instancePtr, int unControllerDeviceIndex,
      VRControllerState001_t pControllerState);

  @Deprecated
  byte vRIVRSystemGetControllerStateWithPose(IntByReference instancePtr, int eOrigin,
      int unControllerDeviceIndex, VRControllerState001_t pControllerState, TrackedDevicePose_t pTrackedDevicePose);

  byte vRIVRSystemGetControllerStateWithPose(IntBuffer instancePtr, int eOrigin,
      int unControllerDeviceIndex, VRControllerState001_t pControllerState, TrackedDevicePose_t pTrackedDevicePose);

  @Deprecated
  void vRIVRSystemTriggerHapticPulse(IntByReference instancePtr, int unControllerDeviceIndex,
      int unAxisId, short usDurationMicroSec);

  void vRIVRSystemTriggerHapticPulse(IntBuffer instancePtr, int unControllerDeviceIndex,
      int unAxisId, short usDurationMicroSec);

  @Deprecated
  Pointer vRIVRSystemGetButtonIdNameFromEnum(IntByReference instancePtr, int eButtonId);

  Pointer vRIVRSystemGetButtonIdNameFromEnum(IntBuffer instancePtr, int eButtonId);

  @Deprecated
  Pointer vRIVRSystemGetControllerAxisTypeNameFromEnum(IntByReference instancePtr, int eAxisType);

  Pointer vRIVRSystemGetControllerAxisTypeNameFromEnum(IntBuffer instancePtr, int eAxisType);

  @Deprecated
  byte vRIVRSystemHandleControllerOverlayInteractionAsMouse(IntByReference instancePtr,
      Compositor_OverlaySettings overlaySettings, HmdVector2_t.ByValue vecWindowClientPositionOnScreen,
      HmdVector2_t.ByValue vecWindowClientSize, int unControllerDeviceIndex, int eOutputType);

  byte vRIVRSystemHandleControllerOverlayInteractionAsMouse(IntBuffer instancePtr,
      Compositor_OverlaySettings overlaySettings, HmdVector2_t.ByValue vecWindowClientPositionOnScreen,
      HmdVector2_t.ByValue vecWindowClientSize, int unControllerDeviceIndex, int eOutputType);

  @Deprecated
  byte vRIVRSystemCaptureInputFocus(IntByReference instancePtr);

  byte vRIVRSystemCaptureInputFocus(IntBuffer instancePtr);

  @Deprecated
  void vRIVRSystemReleaseInputFocus(IntByReference instancePtr);

  void vRIVRSystemReleaseInputFocus(IntBuffer instancePtr);

  @Deprecated
  byte vRIVRSystemIsInputFocusCapturedByAnotherProcess(IntByReference instancePtr);

  byte vRIVRSystemIsInputFocusCapturedByAnotherProcess(IntBuffer instancePtr);

  @Deprecated
  int vRIVRCameraAccessGetCameraCount(IntByReference instancePtr);

  int vRIVRCameraAccessGetCameraCount(IntBuffer instancePtr);

  @Deprecated
  int vRIVRCameraAccessGetCameraId(IntByReference instancePtr, int unCameraIndex,
      Pointer pchBuffer, int unBufferLen);

  int vRIVRCameraAccessGetCameraId(IntBuffer instancePtr, int unCameraIndex, ByteBuffer pchBuffer,
      int unBufferLen);

  @Deprecated
  byte vRIVRCameraAccessEnableCamera(IntByReference instancePtr, int unCameraIndex, byte bEnabled);

  byte vRIVRCameraAccessEnableCamera(IntBuffer instancePtr, int unCameraIndex, byte bEnabled);

  @Deprecated
  byte vRIVRCameraAccessGetCameraInfo(IntByReference instancePtr, int unCameraIndex,
      OpenVR.CameraInfo_t pCameraInfo);

  byte vRIVRCameraAccessGetCameraInfo(IntBuffer instancePtr, int unCameraIndex,
      OpenVR.CameraInfo_t pCameraInfo);

  @Deprecated
  byte vRIVRCameraAccessGetCameraImage(IntByReference instancePtr, int unCameraIndex,
      OpenVR.CameraImage_t pCameraImage);

  byte vRIVRCameraAccessGetCameraImage(IntBuffer instancePtr, int unCameraIndex,
      OpenVR.CameraImage_t pCameraImage);

  @Deprecated
  OpenVR.ChaperoneCalibrationState vRIVRChaperoneGetCalibrationState(IntByReference instancePtr);

  OpenVR.ChaperoneCalibrationState vRIVRChaperoneGetCalibrationState(IntBuffer instancePtr);

  @Deprecated
  byte vRIVRChaperoneGetSoftBoundsInfo(IntByReference instancePtr,
      OpenVR.ChaperoneSoftBoundsInfo_t pInfo);

  byte vRIVRChaperoneGetSoftBoundsInfo(IntBuffer instancePtr,
      OpenVR.ChaperoneSoftBoundsInfo_t pInfo);

  @Deprecated
  byte vRIVRChaperoneGetHardBoundsInfo(IntByReference instancePtr, HmdQuad_t pQuadsBuffer,
      IntByReference punQuadsCount);

  byte vRIVRChaperoneGetHardBoundsInfo(IntBuffer instancePtr, HmdQuad_t pQuadsBuffer,
      IntBuffer punQuadsCount);

  @Deprecated
  byte vRIVRChaperoneGetSeatedBoundsInfo(IntByReference instancePtr,
      OpenVR.ChaperoneSeatedBoundsInfo_t pInfo);

  byte vRIVRChaperoneGetSeatedBoundsInfo(IntBuffer instancePtr,
      OpenVR.ChaperoneSeatedBoundsInfo_t pInfo);

  @Deprecated
  byte vRIVRChaperoneSetupCommitWorkingCopy(IntByReference instancePtr, Pointer pchCalibrationName);

  byte vRIVRChaperoneSetupCommitWorkingCopy(IntBuffer instancePtr, String pchCalibrationName);

  @Deprecated
  void vRIVRChaperoneSetupRevertWorkingCopy(IntByReference instancePtr);

  void vRIVRChaperoneSetupRevertWorkingCopy(IntBuffer instancePtr);

  @Deprecated
  byte vRIVRChaperoneSetupGetWorkingSoftBoundsInfo(IntByReference instancePtr,
      OpenVR.ChaperoneSoftBoundsInfo_t pInfo);

  byte vRIVRChaperoneSetupGetWorkingSoftBoundsInfo(IntBuffer instancePtr,
      OpenVR.ChaperoneSoftBoundsInfo_t pInfo);

  @Deprecated
  byte vRIVRChaperoneSetupGetWorkingHardBoundsInfo(IntByReference instancePtr,
      HmdQuad_t pQuadsBuffer, IntByReference punQuadsCount);

  byte vRIVRChaperoneSetupGetWorkingHardBoundsInfo(IntBuffer instancePtr, HmdQuad_t pQuadsBuffer,
      IntBuffer punQuadsCount);

  @Deprecated
  byte vRIVRChaperoneSetupGetWorkingSeatedZeroPoseToRawTrackingPose(IntByReference instancePtr,
      HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

  byte vRIVRChaperoneSetupGetWorkingSeatedZeroPoseToRawTrackingPose(IntBuffer instancePtr,
      HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

  @Deprecated
  byte vRIVRChaperoneSetupGetWorkingStandingZeroPoseToRawTrackingPose(IntByReference instancePtr,
      HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose);

  byte vRIVRChaperoneSetupGetWorkingStandingZeroPoseToRawTrackingPose(IntBuffer instancePtr,
      HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose);

  @Deprecated
  void vRIVRChaperoneSetupSetWorkingSoftBoundsInfo(IntByReference instancePtr,
      OpenVR.ChaperoneSoftBoundsInfo_t pInfo);

  void vRIVRChaperoneSetupSetWorkingSoftBoundsInfo(IntBuffer instancePtr,
      OpenVR.ChaperoneSoftBoundsInfo_t pInfo);

  @Deprecated
  void vRIVRChaperoneSetupSetWorkingHardBoundsInfo(IntByReference instancePtr,
      HmdQuad_t pQuadsBuffer, int unQuadsCount);

  void vRIVRChaperoneSetupSetWorkingHardBoundsInfo(IntBuffer instancePtr, HmdQuad_t pQuadsBuffer,
      int unQuadsCount);

  @Deprecated
  void vRIVRChaperoneSetupSetWorkingSeatedZeroPoseToRawTrackingPose(IntByReference instancePtr,
      HmdMatrix34_t matSeatedZeroPoseToRawTrackingPose);

  void vRIVRChaperoneSetupSetWorkingSeatedZeroPoseToRawTrackingPose(IntBuffer instancePtr,
      HmdMatrix34_t matSeatedZeroPoseToRawTrackingPose);

  @Deprecated
  void vRIVRChaperoneSetupSetWorkingStandingZeroPoseToRawTrackingPose(IntByReference instancePtr,
      HmdMatrix34_t matStandingZeroPoseToRawTrackingPose);

  void vRIVRChaperoneSetupSetWorkingStandingZeroPoseToRawTrackingPose(IntBuffer instancePtr,
      HmdMatrix34_t matStandingZeroPoseToRawTrackingPose);

  @Deprecated
  int vRIVRCompositorGetLastError(IntByReference instancePtr, Pointer pchBuffer, int unBufferSize);

  int vRIVRCompositorGetLastError(IntBuffer instancePtr, ByteBuffer pchBuffer, int unBufferSize);

  @Deprecated
  void vRIVRCompositorSetVSync(IntByReference instancePtr, byte bVSync);

  void vRIVRCompositorSetVSync(IntBuffer instancePtr, byte bVSync);

  @Deprecated
  byte vRIVRCompositorGetVSync(IntByReference instancePtr);

  byte vRIVRCompositorGetVSync(IntBuffer instancePtr);

  @Deprecated
  void vRIVRCompositorSetGamma(IntByReference instancePtr, float fGamma);

  void vRIVRCompositorSetGamma(IntBuffer instancePtr, float fGamma);

  @Deprecated
  float vRIVRCompositorGetGamma(IntByReference instancePtr);

  float vRIVRCompositorGetGamma(IntBuffer instancePtr);

  @Deprecated
  void vRIVRCompositorSetGraphicsDevice(IntByReference instancePtr,
      OpenVR.Compositor_DeviceType eType, Pointer pDevice);

  void vRIVRCompositorSetGraphicsDevice(IntBuffer instancePtr, OpenVR.Compositor_DeviceType eType,
      Pointer pDevice);

  @Deprecated
  void vRIVRCompositorWaitGetPoses(IntByReference instancePtr, TrackedDevicePose_t pPoseArray,
      int unPoseArrayCount);

  void vRIVRCompositorWaitGetPoses(IntBuffer instancePtr, TrackedDevicePose_t pPoseArray,
      int unPoseArrayCount);

  @Deprecated
  void vRIVRCompositorSubmit(IntByReference instancePtr, int eEye, Pointer pTexture,
      OpenVR.Compositor_TextureBounds pBounds);

  void vRIVRCompositorSubmit(IntBuffer instancePtr, int eEye, Pointer pTexture,
      OpenVR.Compositor_TextureBounds pBounds);

  @Deprecated
  void vRIVRCompositorClearLastSubmittedFrame(IntByReference instancePtr);

  void vRIVRCompositorClearLastSubmittedFrame(IntBuffer instancePtr);

  @Deprecated
  void vRIVRCompositorGetOverlayDefaults(IntByReference instancePtr,
      Compositor_OverlaySettings pSettings);

  void vRIVRCompositorGetOverlayDefaults(IntBuffer instancePtr,
      Compositor_OverlaySettings pSettings);

  @Deprecated
  void vRIVRCompositorSetOverlay(IntByReference instancePtr, Pointer pTexture,
      Compositor_OverlaySettings pSettings);

  void vRIVRCompositorSetOverlay(IntBuffer instancePtr, Pointer pTexture,
      Compositor_OverlaySettings pSettings);

  @Deprecated
  void vRIVRCompositorSetOverlayRaw(IntByReference instancePtr, Pointer buffer, int width,
      int height, int depth, Compositor_OverlaySettings pSettings);

  void vRIVRCompositorSetOverlayRaw(IntBuffer instancePtr, Pointer buffer, int width, int height,
      int depth, Compositor_OverlaySettings pSettings);

  @Deprecated
  void vRIVRCompositorSetOverlayFromFile(IntByReference instancePtr, Pointer pchFilePath,
      Compositor_OverlaySettings pSettings);

  void vRIVRCompositorSetOverlayFromFile(IntBuffer instancePtr, String pchFilePath,
      Compositor_OverlaySettings pSettings);

  @Deprecated
  void vRIVRCompositorClearOverlay(IntByReference instancePtr);

  void vRIVRCompositorClearOverlay(IntBuffer instancePtr);

  @Deprecated
  byte vRIVRCompositorGetFrameTiming(IntByReference instancePtr,
      OpenVR.Compositor_FrameTiming pTiming, int unFramesAgo);

  byte vRIVRCompositorGetFrameTiming(IntBuffer instancePtr, OpenVR.Compositor_FrameTiming pTiming,
      int unFramesAgo);

  @Deprecated
  void vRIVRCompositorFadeToColor(IntByReference instancePtr, float fSeconds, float fRed,
      float fGreen, float fBlue, float fAlpha, byte bBackground);

  void vRIVRCompositorFadeToColor(IntBuffer instancePtr, float fSeconds, float fRed, float fGreen,
      float fBlue, float fAlpha, byte bBackground);

  @Deprecated
  void vRIVRCompositorFadeGrid(IntByReference instancePtr, float fSeconds, byte bFadeIn);

  void vRIVRCompositorFadeGrid(IntBuffer instancePtr, float fSeconds, byte bFadeIn);

  @Deprecated
  void vRIVRCompositorCompositorBringToFront(IntByReference instancePtr);

  void vRIVRCompositorCompositorBringToFront(IntBuffer instancePtr);

  @Deprecated
  void vRIVRCompositorCompositorGoToBack(IntByReference instancePtr);

  void vRIVRCompositorCompositorGoToBack(IntBuffer instancePtr);

  @Deprecated
  void vRIVRCompositorCompositorQuit(IntByReference instancePtr);

  void vRIVRCompositorCompositorQuit(IntBuffer instancePtr);

  @Deprecated
  byte vRIVRCompositorIsFullscreen(IntByReference instancePtr);

  byte vRIVRCompositorIsFullscreen(IntBuffer instancePtr);

  @Deprecated
  byte vRIVRCompositorComputeOverlayIntersection(IntByReference instancePtr,
      Compositor_OverlaySettings pSettings, float fAspectRatio, int eOrigin, HmdVector3_t.ByValue vSource,
      HmdVector3_t.ByValue vDirection, HmdVector2_t pvecIntersectionUV, HmdVector3_t pvecIntersectionTrackingSpace);

  byte vRIVRCompositorComputeOverlayIntersection(IntBuffer instancePtr,
      Compositor_OverlaySettings pSettings, float fAspectRatio, int eOrigin, HmdVector3_t.ByValue vSource,
      HmdVector3_t.ByValue vDirection, HmdVector2_t pvecIntersectionUV, HmdVector3_t pvecIntersectionTrackingSpace);

  @Deprecated
  void vRIVRCompositorSetTrackingSpace(IntByReference instancePtr, int eOrigin);

  void vRIVRCompositorSetTrackingSpace(IntBuffer instancePtr, int eOrigin);

  @Deprecated
  int vRIVRCompositorGetTrackingSpace(IntByReference instancePtr);

  int vRIVRCompositorGetTrackingSpace(IntBuffer instancePtr);

  /** Pointer to unknown (opaque) type */
  public static class Compositor_TextureBounds extends PointerType {
    public Compositor_TextureBounds(Pointer address) {
      super(address);
    }

    public Compositor_TextureBounds() {
      super();
    }
  };

  /** Pointer to unknown (opaque) type */
  public static class ChaperoneSeatedBoundsInfo_t extends PointerType {
    public ChaperoneSeatedBoundsInfo_t(Pointer address) {
      super(address);
    }

    public ChaperoneSeatedBoundsInfo_t() {
      super();
    }
  };

  /** Pointer to unknown (opaque) type */
  public static class Compositor_DeviceType extends PointerType {
    public Compositor_DeviceType(Pointer address) {
      super(address);
    }

    public Compositor_DeviceType() {
      super();
    }
  };

  /** Pointer to unknown (opaque) type */
  public static class CameraInfo_t extends PointerType {
    public CameraInfo_t(Pointer address) {
      super(address);
    }

    public CameraInfo_t() {
      super();
    }
  };

  /** Pointer to unknown (opaque) type */
  public static class CameraImage_t extends PointerType {
    public CameraImage_t(Pointer address) {
      super(address);
    }

    public CameraImage_t() {
      super();
    }
  };

  /** Pointer to unknown (opaque) type */
  public static class ChaperoneCalibrationState extends PointerType {
    public ChaperoneCalibrationState(Pointer address) {
      super(address);
    }

    public ChaperoneCalibrationState() {
      super();
    }
  };

  /** Pointer to unknown (opaque) type */
  public static class ChaperoneSoftBoundsInfo_t extends PointerType {
    public ChaperoneSoftBoundsInfo_t(Pointer address) {
      super(address);
    }

    public ChaperoneSoftBoundsInfo_t() {
      super();
    }
  };

  /** Pointer to unknown (opaque) type */
  public static class Compositor_FrameTiming extends PointerType {
    public Compositor_FrameTiming(Pointer address) {
      super(address);
    }

    public Compositor_FrameTiming() {
      super();
    }
  };
}
